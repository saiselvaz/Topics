Use of this keyword(Lexical Scope)

Scope:means area, space, or region.

Global scope: means global space or a public space.

Local scope: means a local region or a restricted region.


Template Literals:
Template literals are literals delimited with backtick (`) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.


SPREAD AND REST PARAMETERS

SPREAD,
The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.


REST: 
The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.


DESTRUCTURING:
Destructuring is a convenient way of creating new variables by extracting some values from data stored in objects or arrays.



ES6: Ecma Script - 6

    - Features
        - arrow functions
        - template literals
        - destructuring
    
    - Variables/References
        - let 
        - const

    - Classes
        - class
        - constructor
    
    - Promises
    - functions 
        - default parameter values
    
    - operators
        - rest
        - spread
    
    - loops
        - for...of loop
    
    - datastructures
        - Map
        - Set
    
    - Arrays
        - Array.from()
        - Array.of()
    
    - modules
        - import
        - export



Hoisting: 
its just a behaviour where the variable declarations or the function declarations moved to the top of the file.



 spread operator: 
it takes out the values from the array and spreads it wherever we need as raw values



rest operator:
// the rest argument will receive any number of variable arguments passed via the function call and store it as an array


function is hoisted
// // it works, because the function definition has been moved to the top of the file -> hoisting


// scoping: it tells the visibility of a reference/variable
// global scope, function scope, block scope, local scope


FUNCTIONS
// functions are a block of statements that gets executed when we call it.


1.named function.   2.nameless function or anonymous function
3.arrow function
4.IIFE function: Immediately Invoked Function Expression
// its an anonymous function without any reference
// since it does not have any reference, we cannot call it later
// so, we should call it immediately after the function block.



lexical scoping: static scoping
// it determines the scope of a variable or identifier based on where it is declared rather than where it is executed during runtime.



Understanding JSX:

JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods


Understanding the Props:
the data can be passed from one component to another component using these props, similar to how the arguments are passed in a function.



Passing data through Props:

Props data is sent by the parent component and cannot be changed by the child component as they are read-only.


Conditional Rendering:
Conditional rendering in React works the same way conditions work in JavaScript.
Use JavaScript operators like if or the conditional operator to create elements
representing the current state, and let React update the UI to match them.

Props Vs State

Props are used to pass data from a parent component to a child component,
while state is used to manage data within a component.

 Component Lifecycle:
the different states/stages a component takes from getting created and rendered in the DOM to getting removed from the DOM


StateFull and StateLess component

 State: state refers to the data
// that is used to manage and represent the internal state of the component.
// it allows the components to keep track of and manage their own data ->
the data will change over the time as a result of user interactions, data fetching, or other factors.

// whenever the state of a component changes, it will cause re-rendering of the component



Props Drilling: 
props drilling occurs when you need to pass down the data through multiple nested components to reach the ones that require the data.	


Hooks:
Hooks allow us to "hook" into React features such as state and lifecycle methods.


useState:
The React useState Hook allows us to track state in a function component.

State generally refers to data or properties that need to be tracking in an application.

useEffect:
The useEffect Hook allows you to perform side effects in your components.

Some examples of side effects are: fetching data, directly updating the DOM, and timers.

useEffect accepts two arguments. The second argument is optional.

useEffect(<function>, <dependency>)

Props Drilling:
Prop drilling occurs when a parent component generates its state and passes 
it down as props to its children components that do not consume the props 

BrowserRouter: 
BrowserRouter is a router implementation that uses the HTML5
history API (pushstate, replacestate, and popstate events) to keep your UI in sync with the URL. 
It is the parent component used to store all other components.

Route: 
A route is a conditionally shown component that provides UI when its path matches the current URL.

Links: 
The Links component creates links for different routes and implements navigation around the application. It works as an HTML anchor tag.


MEMO
memo lets you skip re-rendering a component when its props are unchanged.

const MemoizedComponent = memo(SomeComponent, arePropsEqual?)

